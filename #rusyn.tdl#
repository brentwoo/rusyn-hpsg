;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Rusyn
;;; created at:
;;;     Wed Dec 02 04:06:04 UTC 2015
;;; based on Matrix customization system version of:
;;;     Mon Nov  2 17:43:24 UTC 2015
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

inflected :+ [ CASE-FLAG luk,
    AGREE-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+,
    AGREE-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
masculine := gender.
feminine := gender.
neuter := gender.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ],
    INFLECTED.CASE-FLAG - ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine ].

pronoun-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.AGREE-FLAG - ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

trans-verb-lex := nom-acc-transitive-verb-lex.

intrans-verb-lex := nom-intransitive-verb-lex.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                AGREE-FLAG #agree ],
    DTR noun-lex &
        [ INFLECTED.AGREE-FLAG #agree ] ].

acc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

nom-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

agree-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ AGREE-FLAG +,
                CASE-FLAG #case ],
    DTR verb-lex &
        [ INFLECTED.CASE-FLAG #case ] ].

1pl-lex-rule := agree-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM plural,
                                                                PER 1st ] ].

3sg-lex-rule := agree-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM singular,
                                                                PER 3rd ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus.

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
